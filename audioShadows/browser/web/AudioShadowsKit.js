//
//  AudioShadowsKit.js
//  AudioShadows
//
//  Created by JulienBloit on 22/02/2019.
//  Copyright Â© 2019  OnOffOn. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



//// APIs you can use in your code:
//
// Available methods for drawing into <canvas> elements:
//    AudioShadowsKit.drawTwoShadows(canvas, grow, timbre, timbreGain, targetFrame*, resizing*)
//
// NOTE: 'canvas' parameter can be either a <canvas> element object, or the id of a <canvas> element in your document.
//
// NOTE: Parameters marked with the '*' symbol are optional
//
// NOTE: Possible arguments for 'resizing' parameter in drawing methods are:
//   'aspectfit': The content is proportionally resized to fit into the target rectangle.
//   'aspectfill': The content is proportionally resized to completely fill the target rectangle.
//   'stretch': The content is stretched to match the entire target rectangle.
//   'center': The content is centered in the target rectangle, but it is NOT resized.
//
// Available Utilities:
//    AudioShadowsKit.clearCanvas(canvas)
//    AudioShadowsKit.makeRect(x, y, width, height)


//// Create StyleKit Object
var AudioShadowsKit = {};
(function() {

    //// Drawing Methods

    function drawTwoShadows(canvas, grow, timbre, timbreGain, targetFrame, resizing) {
        //// General Declarations
        canvas = typeof canvas === 'string' ? document.getElementById(canvas) : canvas;
        var context = canvas.getContext('2d');
        
        //// Resize to Target Frame
        context.save();
        var resizedFrame = applyResizingBehavior(resizing, makeRect(0, 0, 239, 120), targetFrame);
        context.translate(resizedFrame.x, resizedFrame.y);
        context.scale(resizedFrame.w / 239, resizedFrame.h / 120);
        var resizedShadowScale = Math.min(resizedFrame.w / 239, resizedFrame.h / 120);



        //// Shadow Declarations
        function shadow(context) {
            context.shadowOffsetX = 3;
            context.shadowOffsetY = 3;
            context.shadowBlur = 5;
            context.shadowColor = 'rgb(0, 0, 0)';
        }

        //// Variable Declarations
        var growDash = grow > 0.5 ? grow * 2 + 1 : grow * 80;
        var growGap = grow > 0.5 ? grow * 2 + 0.5 : 100;
        var kikiScaleX = 1 - timbre;
        var kikiScaleY = 1 - timbre;
        var timbreDashPhase = timbreGain * 300;

        //// Bezier Drawing
        context.beginPath();
        context.moveTo(58.5, 64.5);
        context.bezierCurveTo(57.16, 64.5, 43.97, 73.29, 32.5, 75.5);
        context.bezierCurveTo(23.49, 77.23, 15.5, 72.5, 15.5, 72.5);
        context.save();
        shadow(context);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.strokeStyle = 'rgb(0, 0, 0)';
        context.lineWidth = 5.5;
        context.save();
        context.setLineDash([growDash, growGap]);
        context.lineDashOffset = 0;
        context.stroke();
        context.restore();
        context.restore();


        //// Bezier 2 Drawing
        context.beginPath();
        context.moveTo(58.5, 64.5);
        context.bezierCurveTo(57.25, 64.5, 39.36, 62.93, 28.5, 58.5);
        context.bezierCurveTo(18.54, 54.44, 15.5, 47.5, 15.5, 47.5);
        context.save();
        shadow(context);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.strokeStyle = 'rgb(0, 0, 0)';
        context.lineWidth = 5;
        context.save();
        context.setLineDash([growDash, growGap]);
        context.lineDashOffset = 0;
        context.stroke();
        context.restore();
        context.restore();


        //// Bezier 3 Drawing
        context.beginPath();
        context.moveTo(61.5, 64.5);
        context.bezierCurveTo(60.22, 64.5, 38.5, 20.5, 38.5, 20.5);
        context.save();
        shadow(context);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.strokeStyle = 'rgb(0, 0, 0)';
        context.lineWidth = 5;
        context.save();
        context.setLineDash([growDash, growGap]);
        context.lineDashOffset = 0;
        context.stroke();
        context.restore();
        context.restore();


        //// Bezier 4 Drawing
        context.beginPath();
        context.moveTo(61.5, 64.5);
        context.bezierCurveTo(61.11, 64.5, 60.8, 33.33, 57.5, 16.5);
        context.bezierCurveTo(55.2, 4.77, 49.5, 5.5, 49.5, 5.5);
        context.save();
        shadow(context);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.strokeStyle = 'rgb(0, 0, 0)';
        context.lineWidth = 5;
        context.save();
        context.setLineDash([growDash, growGap]);
        context.lineDashOffset = 3;
        context.stroke();
        context.restore();
        context.restore();


        //// Bezier 5 Drawing
        context.beginPath();
        context.moveTo(61.5, 63.5);
        context.bezierCurveTo(61.99, 63.5, 65.21, 44.78, 70, 28.76);
        context.bezierCurveTo(71.27, 24.52, 74.4, 13.09, 76.5, 8.5);
        context.bezierCurveTo(77.54, 6.22, 78.5, 8.5, 78.5, 8.5);
        context.save();
        shadow(context);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.strokeStyle = 'rgb(0, 0, 0)';
        context.lineWidth = 5;
        context.lineJoin = 'round';
        context.save();
        context.setLineDash([growDash, growGap]);
        context.lineDashOffset = 0;
        context.stroke();
        context.restore();
        context.restore();


        //// Bezier 6 Drawing
        context.beginPath();
        context.moveTo(61.5, 64.5);
        context.bezierCurveTo(63.11, 64.5, 90.5, 20.5, 90.5, 20.5);
        context.save();
        shadow(context);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.strokeStyle = 'rgb(0, 0, 0)';
        context.lineWidth = 5;
        context.save();
        context.setLineDash([growDash, growGap]);
        context.lineDashOffset = 0;
        context.stroke();
        context.restore();
        context.restore();


        //// Bezier 7 Drawing
        context.beginPath();
        context.moveTo(61.5, 63.5);
        context.bezierCurveTo(63.04, 63.5, 82.1, 56.95, 95.5, 49.5);
        context.bezierCurveTo(107.16, 43.02, 113.5, 35.5, 113.5, 35.5);
        context.save();
        shadow(context);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.strokeStyle = 'rgb(0, 0, 0)';
        context.lineWidth = 5;
        context.save();
        context.setLineDash([growDash, growGap]);
        context.lineDashOffset = 0;
        context.stroke();
        context.restore();
        context.restore();


        //// Bezier 8 Drawing
        context.beginPath();
        context.moveTo(61.5, 64.5);
        context.bezierCurveTo(59.86, 64.5, 38.82, 47.23, 24.5, 32.5);
        context.bezierCurveTo(10.14, 17.73, 2.5, 5.5, 2.5, 5.5);
        context.save();
        shadow(context);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.strokeStyle = 'rgb(0, 0, 0)';
        context.lineWidth = 5;
        context.save();
        context.setLineDash([growDash, growGap]);
        context.lineDashOffset = 0;
        context.stroke();
        context.restore();
        context.restore();


        //// Bezier 9 Drawing
        context.beginPath();
        context.moveTo(61.5, 64.5);
        context.bezierCurveTo(63.04, 64.5, 82.1, 72.22, 95.5, 81);
        context.bezierCurveTo(107.16, 88.64, 113.5, 97.5, 113.5, 97.5);
        context.save();
        shadow(context);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.strokeStyle = 'rgb(0, 0, 0)';
        context.lineWidth = 5;
        context.save();
        context.setLineDash([growDash, growGap]);
        context.lineDashOffset = 0;
        context.stroke();
        context.restore();
        context.restore();


        //// Oval Drawing
        oval(context, 55, 59, 12, 14);
        context.fillStyle = 'rgb(0, 0, 0)';
        context.fill();


        //// Oval 2 Drawing
        oval(context, 163, 59, 12, 14);
        context.fillStyle = 'rgb(0, 0, 0)';
        context.fill();


        //// KIKI Drawing
        context.save();
        context.translate(170.26, 60.18);
        context.scale(kikiScaleX, kikiScaleY);


        function kIKICanvasLayer(width, height)
        {
            var canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            var context = canvas.getContext('2d');

            context.beginPath();
            context.moveTo(-2.92, -48.18);
            context.bezierCurveTo(-2.92, -48.18, -0.13, -27.89, -0.13, -27.89);
            context.lineTo(3.73, -47.84);
            context.lineTo(3.84, -27.44);
            context.lineTo(10.3, -46.7);
            context.lineTo(7.74, -26.52);
            context.lineTo(16.7, -44.78);
            context.lineTo(11.5, -25.15);
            context.lineTo(22.81, -42.12);
            context.lineTo(15.07, -23.34);
            context.lineTo(28.56, -38.76);
            context.lineTo(18.38, -21.12);
            context.lineTo(33.83, -34.75);
            context.lineTo(21.39, -18.53);
            context.lineTo(38.56, -30.15);
            context.lineTo(24.04, -15.61);
            context.lineTo(42.67, -25.03);
            context.lineTo(26.31, -12.41);
            context.lineTo(46.09, -19.49);
            context.lineTo(28.14, -8.97);
            context.lineTo(48.76, -13.59);
            context.lineTo(29.51, -5.35);
            context.lineTo(50.66, -7.45);
            context.lineTo(30.41, -1.61);
            context.lineTo(51.74, -1.15);
            context.bezierCurveTo(51.74, -1.15, 45.22, -0.1, 39.46, 0.82);
            context.lineTo(-45.93, 0.82);
            context.bezierCurveTo(-50.2, 0.21, -53.86, -0.31, -53.86, -0.31);
            context.lineTo(-32.58, -1.11);
            context.lineTo(-53.27, -6.63);
            context.lineTo(-31.98, -4.86);
            context.lineTo(-51.86, -12.8);
            context.lineTo(-30.89, -8.5);
            context.lineTo(-49.65, -18.73);
            context.lineTo(-29.32, -11.97);
            context.lineTo(-46.66, -24.33);
            context.lineTo(-27.31, -15.2);
            context.lineTo(-42.96, -29.5);
            context.lineTo(-24.89, -18.16);
            context.lineTo(-38.59, -34.17);
            context.lineTo(-22.08, -20.8);
            context.lineTo(-33.63, -38.27);
            context.lineTo(-18.95, -23.07);
            context.lineTo(-28.16, -41.72);
            context.lineTo(-15.53, -24.93);
            context.lineTo(-22.25, -44.47);
            context.lineTo(-11.87, -26.37);
            context.lineTo(-16.01, -46.49);
            context.lineTo(-8.05, -27.34);
            context.lineTo(-9.53, -47.73);
            context.lineTo(-4.12, -27.85);
            context.lineTo(-2.92, -48.18);
            context.lineTo(-2.92, -48.18);
            context.closePath();
            context.fillStyle = 'rgb(0, 0, 0)';
            context.fill();
            context.strokeStyle = 'rgb(0, 0, 0)';
            context.lineWidth = 0.5;
            context.lineCap = 'round';
            context.lineJoin = 'bevel';
            context.save();
            context.setLineDash([2, 1]);
            context.lineDashOffset = 0;
            context.stroke();
            context.restore();
            return canvas;
        }

        context.save();
        context.globalAlpha = timbreGain;
        context.drawImage(kIKICanvasLayer(canvas.width, canvas.height), 0, 0);
        context.restore();

        context.restore();


        //// Bezier 11 Drawing
        context.beginPath();
        context.moveTo(131, 42);
        context.lineTo(146, 22);
        context.save();
        shadow(context);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.fillStyle = 'rgb(0, 0, 0)';
        context.fill();
        context.restore();



        //// BOOBA Drawing
        context.save();
        context.translate(168.82, 59.18);
        context.scale(timbre, timbre);


        function bOOBACanvasLayer(width, height)
        {
            var canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            var context = canvas.getContext('2d');

            context.beginPath();
            context.moveTo(-3.82, -46.18);
            context.bezierCurveTo(-3.82, -46.18, -3.48, -32.27, -1.82, -32.18);
            context.bezierCurveTo(-0.16, -32.09, -4.25, -51.89, 3.18, -55.18);
            context.bezierCurveTo(10.61, -58.47, 1.22, -27.78, 2.86, -27.5);
            context.bezierCurveTo(4.51, -27.21, 4.18, -44.18, 9.18, -44.18);
            context.bezierCurveTo(14.18, -44.18, 6.18, -23.18, 6.18, -23.18);
            context.bezierCurveTo(6.18, -23.18, 11.18, -47.18, 15.18, -46.18);
            context.bezierCurveTo(19.18, -45.18, 8.99, -25.87, 10.52, -25.2);
            context.bezierCurveTo(12.05, -24.54, 21.49, -52.18, 21.83, -42.18);
            context.bezierCurveTo(22.18, -32.18, 14.18, -21.18, 14.18, -21.18);
            context.bezierCurveTo(14.18, -21.18, 21.18, -51.18, 33.18, -51.18);
            context.bezierCurveTo(45.18, -51.18, 17.4, -21.17, 17.4, -21.17);
            context.bezierCurveTo(17.4, -21.17, 29.53, -38.43, 32.85, -34.8);
            context.bezierCurveTo(36.18, -31.18, 20.41, -18.59, 20.41, -18.59);
            context.bezierCurveTo(20.41, -18.59, 37.99, -26.23, 37.58, -30.2);
            context.bezierCurveTo(37.18, -34.18, 20.18, -12.18, 20.18, -12.18);
            context.bezierCurveTo(20.18, -12.18, 48.69, -40.09, 51.18, -34.18);
            context.bezierCurveTo(53.67, -28.27, 25.33, -12.46, 25.33, -12.46);
            context.bezierCurveTo(25.33, -12.46, 36.76, -23.24, 42.76, -21.24);
            context.bezierCurveTo(48.76, -19.24, 26.49, -10.5, 27.16, -9.02);
            context.bezierCurveTo(27.83, -7.55, 45.81, -21.06, 47.79, -13.65);
            context.bezierCurveTo(49.76, -6.24, 29.68, -7.1, 28.53, -5.4);
            context.bezierCurveTo(27.39, -3.71, 43.2, -6.86, 43.2, -6.86);
            context.bezierCurveTo(43.2, -6.86, 64.84, -15.98, 55.76, -5.24);
            context.bezierCurveTo(46.68, 5.5, 29.43, -1.66, 29.43, -1.66);
            context.bezierCurveTo(29.43, -1.66, 57.18, 8.82, 64.18, -1.18);
            context.bezierCurveTo(71.18, -11.18, 44.24, -0.16, 38.48, 0.76);
            context.lineTo(-46.91, 0.76);
            context.bezierCurveTo(-51.18, 0.15, -54.82, 4.82, -54.82, -0.18);
            context.bezierCurveTo(-54.82, -1.59, -53.24, -5.06, -50.82, -5.18);
            context.bezierCurveTo(-44.67, -5.49, -33.66, -0.03, -33.56, -1.16);
            context.bezierCurveTo(-33.41, -2.74, -42.82, 0.82, -43.82, -5.18);
            context.bezierCurveTo(-44.82, -11.18, -33.31, -3.38, -32.96, -4.92);
            context.bezierCurveTo(-32.6, -6.46, -44.8, -7.5, -44.82, -12.18);
            context.bezierCurveTo(-44.84, -16.86, -32.42, -7.07, -31.87, -8.56);
            context.bezierCurveTo(-31.31, -10.04, -52.82, -13.18, -46.82, -26.18);
            context.bezierCurveTo(-40.82, -39.18, -31.05, -10.62, -30.3, -12.02);
            context.bezierCurveTo(-29.56, -13.42, -48.15, -23.57, -47.64, -24.38);
            context.bezierCurveTo(-47.14, -25.19, -29.22, -13.97, -28.29, -15.26);
            context.bezierCurveTo(-27.37, -16.55, -75.82, -29.18, -60.82, -40.18);
            context.bezierCurveTo(-45.82, -51.18, -26.96, -17.05, -25.87, -18.22);
            context.bezierCurveTo(-24.78, -19.39, -38.82, -21.18, -29.82, -28.18);
            context.bezierCurveTo(-20.82, -35.18, -24.3, -19.83, -23.06, -20.85);
            context.bezierCurveTo(-21.82, -21.88, -36.82, -32.18, -32.82, -33.18);
            context.bezierCurveTo(-30.61, -33.73, -28.55, -29.18, -25.82, -26.18);
            context.bezierCurveTo(-23.61, -23.75, -20.54, -22.74, -19.93, -23.12);
            context.bezierCurveTo(-19.06, -23.67, -26.79, -31.9, -29.82, -37.18);
            context.bezierCurveTo(-31.6, -40.29, -37.52, -46.33, -33.82, -48.18);
            context.bezierCurveTo(-23.82, -53.18, -17.98, -24.3, -16.51, -24.99);
            context.bezierCurveTo(-15.03, -25.68, -33.5, -44.24, -23.82, -46.18);
            context.bezierCurveTo(-18.82, -47.18, -21.05, -40.62, -18.82, -35.18);
            context.bezierCurveTo(-16.73, -30.1, -13.61, -26.18, -12.85, -26.42);
            context.bezierCurveTo(-11.29, -26.93, -23.16, -44.91, -16.99, -46.55);
            context.bezierCurveTo(-10.82, -48.18, -10.65, -27.09, -9.03, -27.4);
            context.bezierCurveTo(-7.41, -27.71, -12.82, -38.18, -9.82, -38.18);
            context.bezierCurveTo(-6.82, -38.18, -6.75, -27.8, -5.09, -27.91);
            context.bezierCurveTo(-3.44, -28.02, -7.74, -40.12, -6.82, -47.18);
            context.bezierCurveTo(-5.9, -54.24, -3.82, -46.18, -3.82, -46.18);
            context.closePath();
            context.fillStyle = 'rgb(0, 0, 0)';
            context.fill();
            context.strokeStyle = 'rgb(0, 0, 0)';
            context.lineWidth = 2;
            context.lineCap = 'round';
            context.lineJoin = 'bevel';
            context.save();
            context.setLineDash([2, 2]);
            context.lineDashOffset = 0;
            context.stroke();
            context.restore();
            return canvas;
        }

        context.save();
        context.globalAlpha = timbreGain;
        context.drawImage(bOOBACanvasLayer(canvas.width, canvas.height), 0, 0);
        context.restore();

        context.restore();
        
        context.restore();

    }

    //// Infrastructure

    function clearCanvas(canvas) {
        canvas = typeof canvas === 'string' ? document.getElementById(canvas) : canvas;
        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
    }

    // Possible arguments for 'resizing' parameter are:
    //   'aspectfit': The content is proportionally resized to fit into the target rectangle.
    //   'aspectfill': The content is proportionally resized to completely fill the target rectangle.
    //   'stretch': The content is stretched to match the entire target rectangle.
    //   'center': The content is centered in the target rectangle, but it is NOT resized.
    function applyResizingBehavior(resizing, rect, targetRect) {
        if (targetRect === undefined || equalRects(rect, targetRect) || equalRects(targetRect, makeRect(0, 0, 0, 0))) {
            return rect;
        }

        var scales = makeSize(0, 0);
        scales.w = Math.abs(targetRect.w / rect.w);
        scales.h = Math.abs(targetRect.h / rect.h);

        switch (resizing) {
            case 'aspectfit': {
                scales.w = Math.min(scales.w, scales.h);
                scales.h = scales.w;
                break;
            }
            case 'aspectfill': {
                scales.w = Math.max(scales.w, scales.h);
                scales.h = scales.w;
                break;
            }
            case 'stretch':
            case undefined:
                break;
            case 'center': {
                scales.w = 1;
                scales.h = 1;
                break;
            }
            default:
                throw 'Unknown resizing behavior "' + resizing + '". Use "aspectfit", "aspectfill", "stretch" or "center" as resizing behavior.';
        }

        var result = makeRect(Math.min(rect.x, rect.x + rect.w), Math.min(rect.y, rect.y + rect.h), Math.abs(rect.w), Math.abs(rect.h));
        result.w *= scales.w;
        result.h *= scales.h;
        result.x = targetRect.x + (targetRect.w - result.w) / 2;
        result.y = targetRect.y + (targetRect.h - result.h) / 2;
        return result;
    }

    function oval(context, x, y, w, h) {
        context.save();
        context.beginPath();
        context.translate(x, y);
        context.scale(w/2, h/2);
        context.arc(1, 1, 1, 0, 2*Math.PI, false);
        context.closePath();
        context.restore();
    }

    function makeRect(x, y, w, h) {
        return { x: x, y: y, w: w, h: h };
    }

    function equalRects(r1, r2) {
        return r1.x === r2.x && r1.y === r2.y && r1.w == r2.w && r1.h === r2.h;
    }

    function makeSize(w, h) {
        return { w: w, h: h };
    }

    //// Public Interface

    // Drawing Methods
    AudioShadowsKit.drawTwoShadows = drawTwoShadows;

    // Utilities
    AudioShadowsKit.clearCanvas = clearCanvas;
    AudioShadowsKit.makeRect = makeRect;

})();
